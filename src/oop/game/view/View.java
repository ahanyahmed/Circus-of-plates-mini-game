/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package oop.game.view;

import eg.edu.alexu.csd.oop.game.GameEngine;
import eg.edu.alexu.csd.oop.game.GameEngine.GameController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import oop.game.controller.Circus;

/**
 *
 * @author ahmed
 */
public class View extends javax.swing.JFrame {

    /**
     * Creates new form View1
     */
    public View() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        easy = new javax.swing.JButton();
        medium = new javax.swing.JButton();
        hard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(815, 630));
        setSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        easy.setIcon(new javax.swing.ImageIcon("src\\resources\\easy.png"));
        easy.setText("easy");
        easy.setOpaque(false);
        easy.setContentAreaFilled(false);
        easy.setBorderPainted(false);
        easy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyActionPerformed(evt);
            }
        });
        getContentPane().add(easy);
        easy.setBounds(330, 170, 190, 70);

        medium.setIcon(new javax.swing.ImageIcon("src\\resources\\medium.png"));
        medium.setText("easy");
        medium.setOpaque(false);
        medium.setContentAreaFilled(false);
        medium.setBorderPainted(false);
        medium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumActionPerformed(evt);
            }
        });
        getContentPane().add(medium);
        medium.setBounds(280, 260, 290, 70);

        hard.setIcon(new javax.swing.ImageIcon("src\\resources\\hard.png"));
        hard.setText("easy");
        hard.setOpaque(false);
        hard.setContentAreaFilled(false);
        hard.setBorderPainted(false);
        hard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardActionPerformed(evt);
            }
        });
        getContentPane().add(hard);
        hard.setBounds(320, 350, 210, 70);

        jLabel1.setIcon(new javax.swing.ImageIcon("src\\resources\\background.jpg"));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 800, 600);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private GameController gameController = null;

    private void easyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyActionPerformed
        // TODO add your handling code here:
        gameController = GameEngine.start("Circus Of Plates", new Circus(0), createMenuBar(), Color.BLACK);
        dispose();
    }//GEN-LAST:event_easyActionPerformed

    private void mediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumActionPerformed
        // TODO add your handling code here:
        gameController = GameEngine.start("Circus Of Plates", new Circus(1), createMenuBar(), Color.BLACK);
        dispose();
    }//GEN-LAST:event_mediumActionPerformed

    private void hardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardActionPerformed
        // TODO add your handling code here:
        gameController = GameEngine.start("Circus Of Plates", new Circus(2), createMenuBar(), Color.BLACK);
        dispose();
    }//GEN-LAST:event_hardActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton easy;
    private javax.swing.JButton hard;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton medium;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the gameController
     */
    public GameEngine.GameController getGameController() {
        return gameController;
    }

    /**
     * @param gameController the gameController to set
     */
    public void setGameController(GameEngine.GameController gameController) {
        this.gameController = gameController;
    }

    private JMenuBar createMenuBar() {
        
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("options");
        JMenuItem easyMenuItem = new JMenuItem("Easy Game");
        JMenuItem mediumMenuItem = new JMenuItem("Medium Game");
        JMenuItem hardMenuItem = new JMenuItem("Hard Game");
        JMenuItem pauseMenuItem = new JMenuItem("Pause");
        JMenuItem resumeMenuItem = new JMenuItem("Resume");

        menu.add(easyMenuItem);
        menu.add(mediumMenuItem);
        menu.add(hardMenuItem);
        menu.addSeparator();
        menu.add(pauseMenuItem);
        menu.add(resumeMenuItem);
        menuBar.add(menu);
easyMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameController.changeWorld(new Circus(0));
            }
        });
        mediumMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameController.changeWorld(new Circus(1));
            }
        });
        hardMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameController.changeWorld(new Circus(2));
            }
        });
        pauseMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameController.pause();
                Circus.pause();
            }
        });
        resumeMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                gameController.resume();
                Circus.resume();
            }
        });
        return menuBar;
        
    }
}
